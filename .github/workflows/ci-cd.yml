name: CI/CD Pipeline - Oil Spill Detection

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install pytest flake8 black
          pip install -r requirements.txt
      
      - name: Code Formatting Check
        run: |
          cd backend
          black --check --diff .
      
      - name: Lint with Flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Python Syntax Check
        run: |
          cd backend
          python -m py_compile main.py
          echo "Backend syntax check passed"

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Lint Check
        run: npm run lint
      
      - name: Build Test
        run: npm run build
      
      - name: Type Check
        run: npm run type-check || npx tsc --noEmit

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build -t oil-spill-backend:test .
          echo "Backend Docker build successful"
      
      - name: Build Frontend Docker Image
        run: |
          docker build -t oil-spill-frontend:test .
          echo "Frontend Docker build successful"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: All Checks Passed
        run: |
          echo "ðŸŽ‰ All tests passed!"
          echo "âœ… Backend tests: PASSED"
          echo "âœ… Frontend tests: PASSED" 
          echo "âœ… Docker builds: PASSED"
          echo "âœ… Security scan: PASSED"
          echo "ðŸš€ Ready for deployment to:"
          echo "   - Frontend: Vercel (Auto-deploy on push)"
          echo "   - Backend: HuggingFace Spaces (Live)"
          echo ""
          echo "ðŸ“Š Production URLs:"
          echo "   - Frontend: https://oil-spill-frontend-oigeradm3-sahil-vishwakarmas-projects.vercel.app"
          echo "   - Backend: https://sahilvishwa2108-oil-spill-detection-api.hf.space"
